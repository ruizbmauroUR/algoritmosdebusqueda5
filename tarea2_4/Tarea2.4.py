import streamlit as st
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from io import BytesIO
import plotly.express as px
import matplotlib.pyplot as plt

# Configuraci√≥n de la app
st.set_page_config(page_title="K-Means con PCA y Comparativa - Mauro Ruiz Bernal 744817", layout="wide")
st.title("Clustering Interactivo con K-Means y PCA (Comparaci√≥n Antes/Despu√©s) - Mauro Ruiz Bernal 744817")
st.write(
    """
Sube tus datos, aplica **K-Means**, y observa c√≥mo el algoritmo agrupa los puntos en un espacio reducido con **PCA (2D o 3D)**.  
Tambi√©n puedes comparar la distribuci√≥n **antes y despu√©s** del clustering.
"""
)

# --- Subir archivo ---
st.sidebar.header("Subir datos")
uploaded_file = st.sidebar.file_uploader("Selecciona tu archivo CSV", type=["csv"])

if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)
    st.success("Archivo cargado correctamente.")
    st.write("### Vista previa de los datos:")
    st.dataframe(data.head())

    # Filtrar columnas num√©ricas
    numeric_cols = data.select_dtypes(include=['float64', 'int64', 'float32', 'int32']).columns.tolist()

    if len(numeric_cols) < 2:
        st.warning("El archivo debe contener al menos dos columnas num√©ricas.")
    else:
        st.markdown(
            """
            - Se seleccionan autom√°ticamente **todas las columnas num√©ricas** del archivo para entrenar K-Means.  
            - Esto significa que solo se usan variables con valores num√©ricos (por ejemplo: ingresos, edad, gasto).  
            - Columnas de texto o fechas sin transformar no se usan porque K-Means calcula distancias num√©ricas.
            """
        )
        st.sidebar.header("Configuraci√≥n del modelo")
        # Usar autom√°ticamente todas las columnas num√©ricas
        selected_cols = numeric_cols

        # Par√°metros de clustering
        k = st.sidebar.slider("N√∫mero de clusters (k):", 1, 10, 3)
        n_components = st.sidebar.radio("Visualizaci√≥n PCA:", [2, 3], index=0)
        init_method = st.sidebar.selectbox("init (inicializaci√≥n)", ["k-means++", "random"], index=0)
        max_iter = st.sidebar.slider("max_iter (iteraciones m√°ximas)", 1, 1000, 300, step=1)
        use_auto_n_init = st.sidebar.checkbox("n_init = 'auto' (recomendado)", value=True)
        if use_auto_n_init:
            n_init_param = "auto"
        else:
            n_init_param = st.sidebar.slider("n_init (reinicios)", 1, 100, 10)
        random_state = st.sidebar.number_input("random_state (semilla)", min_value=0, max_value=100000, value=42, step=1)

        # --- Datos y modelo ---
        X = data[selected_cols]
        kmeans = KMeans(
            n_clusters=k,
            init=init_method,
            max_iter=max_iter,
            n_init=n_init_param,
            random_state=random_state,
        )
        #kmeans = KMeans(n_clusters=k, random_state=random_state)
        kmeans.fit(X)
        data['Cluster'] = kmeans.labels_

        # --- PCA ---
        pca = PCA(n_components=n_components)
        X_pca = pca.fit_transform(X)
        pca_cols = [f'PCA{i+1}' for i in range(n_components)]
        pca_df = pd.DataFrame(X_pca, columns=pca_cols)
        pca_df['Cluster'] = data['Cluster']

        # --- Visualizaci√≥n antes del clustering ---
        st.subheader("Distribuci√≥n original (antes de K-Means)")
        if n_components == 2:
            fig_before = px.scatter(
                pca_df,
                x='PCA1',
                y='PCA2',
                title="Datos originales proyectados con PCA (sin agrupar)",
                color_discrete_sequence=["gray"]
            )
        else:
            fig_before = px.scatter_3d(
                pca_df,
                x='PCA1',
                y='PCA2',
                z='PCA3',
                title="Datos originales proyectados con PCA (sin agrupar)",
                color_discrete_sequence=["gray"]
            )
        st.plotly_chart(fig_before, use_container_width=True)

        # --- Visualizaci√≥n despu√©s del clustering ---
        st.subheader(f"Datos agrupados con K-Means (k = {k})")
        if n_components == 2:
            fig_after = px.scatter(
                pca_df,
                x='PCA1',
                y='PCA2',
                color=pca_df['Cluster'].astype(str),
                title="Clusters visualizados en 2D con PCA",
                color_discrete_sequence=px.colors.qualitative.Vivid
            )
        else:
            fig_after = px.scatter_3d(
                pca_df,
                x='PCA1',
                y='PCA2',
                z='PCA3',
                color=pca_df['Cluster'].astype(str),
                title="Clusters visualizados en 3D con PCA",
                color_discrete_sequence=px.colors.qualitative.Vivid
            )
        st.plotly_chart(fig_after, use_container_width=True)

        # --- Centroides ---
        st.subheader("Centroides de los clusters (en espacio PCA)")
        centroides_pca = pd.DataFrame(pca.transform(kmeans.cluster_centers_), columns=pca_cols)
        st.dataframe(centroides_pca)

        # --- M√©todo del Codo ---
        st.subheader("M√©todo del Codo (Elbow Method)")
        if st.button("Calcular n√∫mero √≥ptimo de clusters"):
            inertias = []
            K = range(1, 11)
            for i in K:
                km = KMeans(
                    n_clusters=i,
                    init=init_method,
                    max_iter=max_iter,
                    n_init=n_init_param,
                    random_state=random_state,
                )
                km.fit(X)
                inertias.append(km.inertia_)

            fig2, ax2 = plt.subplots(figsize=(8, 6))
            plt.plot(K, inertias, 'bo-')
            plt.title('M√©todo del Codo')
            plt.xlabel('N√∫mero de Clusters (k)')
            plt.ylabel('Inercia (SSE)')
            plt.grid(True)
            st.pyplot(fig2)

        # --- Descarga de resultados ---
        st.subheader("Descargar datos con clusters asignados")
        buffer = BytesIO()
        data.to_csv(buffer, index=False)
        buffer.seek(0)
        st.download_button(
            label="‚¨áDescargar CSV con Clusters",
            data=buffer,
            file_name="datos_clusterizados.csv",
            mime="text/csv"
        )

else:
    st.info("üëâ Carga un archivo CSV en la barra lateral para comenzar.")
    st.write(
        """
    **Ejemplo de formato:**
    | Ingreso_Anual | Gasto_Tienda | Edad |
    |----------------|--------------|------|
    | 45000 | 350 | 28 |
    | 72000 | 680 | 35 |
    | 28000 | 210 | 22 |
    """
    )


